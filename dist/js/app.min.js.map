{"version":3,"sources":["_utils.js","app.js"],"names":["urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","deferredPrompt","offlineTasks","apexServiceWorker","hasSubscribedNotifications","pwa","init","app","navigator","serviceWorker","register","then","registeredServiceWorker","console","log","ui","catch","promise","rejected","warn","localforage","getItem","tasks","event","offline","subscribeBtn","document","getElementById","pushManager","getSubscription","subscription","disabled","textContent","installBtn","style","display","install","prompt","userChoice","choiceResult","outcome","something","name","apex","server","process","x01","err","error","call","onLine","data","message","alert","JSON","stringify","task","add","arguments","item","setValue","push","callee","Array","prototype","slice","setItem","run","key","Object","hasOwnProperty","apply","clear","online","showPageSuccess","$","remove","errors","type","location","clearErrors","showErrors","addEventListener","preventDefault","notification","ask","Notification","requestPermission","result","convertedVapidPublicKey","subscribe","userVisibleOnly","applicationServerKey","fetch","method","headers","Content-Type","Accept","body","res","ok","showNotification","icon","appImages","badge"],"mappings":"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","file":"app.min.js","sourcesContent":["function urlBase64ToUint8Array(base64String) {\n\tvar padding = '='.repeat((4 - base64String.length % 4) % 4);\n\tvar base64 = (base64String + padding)\n\t\t.replace(/\\-/g, '+')\n\t\t.replace(/_/g, '/');\n\n\tvar rawData = window.atob(base64);\n\tvar outputArray = new Uint8Array(rawData.length);\n\n\tfor (var i = 0; i < rawData.length; ++i) {\n\t\toutputArray[i] = rawData.charCodeAt(i);\n\t}\n\treturn outputArray;\n}","/**\n * @global variables\n **/\nvar apexServiceWorker = null;\nvar hasSubscribedNotifications = false;\nvar deferredPrompt;\nvar offlineTasks;\n\n/**\n * @namespace pwa\n * All functions in this demo will be encapsulated inside of this namespace\n **/\nvar pwa = {};\n\n/**\n * @module pwa.init\n **/\npwa.init = {\n\t/**\n\t * Function that is invoked on page load\n\t * Used for registering our service worker\n\t **/\n\tapp: function() {\n\t\t// Check if service workers are supported\n\t\tif ('serviceWorker' in navigator) {\n\t\t\t// Service workers are supported, then register our service worker\n\t\t\tnavigator.serviceWorker\n\t\t\t\t.register('/sw.js')\n\t\t\t\t.then(function(registeredServiceWorker) {\n\t\t\t\t\tapexServiceWorker = registeredServiceWorker;\n\t\t\t\t\tconsole.log('Service worker registered!');\n\t\t\t\t\tpwa.init.ui();\n\t\t\t\t}).catch(pwa.promise.rejected);\n\t\t} else {\n\t\t\tconsole.warn('Service workers are not supported by your browser.');\n\t\t}\n\n\t\tlocalforage.getItem('offline-tasks').then(function(tasks) {\n\t\t\tofflineTasks = tasks || [];\n\t\t}).catch(pwa.promise.rejected);\n\t},\n\n\t/**\n\t * Function that is invoked on page load\n\t * Used for registering our service worker\n\t **/\n\tui: function() {\n\t\tpwa.event.offline();\n\n\t\tvar subscribeBtn = document.getElementById(\"SUBSCRIBE_NOTIFICATIONS\");\n\n\t\tif (subscribeBtn) {\n\t\t\t// Check if notifications are supported\n\t\t\tif ('PushManager' in window) {\n\t\t\t\tapexServiceWorker.pushManager.getSubscription()\n\t\t\t\t\t.then(function(subscription) {\n\t\t\t\t\t\t// Check if the user has already subscribed to notifications\n\t\t\t\t\t\t// And store the value in the global variable\n\t\t\t\t\t\tif (subscription === null) {\n\t\t\t\t\t\t\thasSubscribedNotifications = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thasSubscribedNotifications = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hasSubscribedNotifications) {\n\t\t\t\t\t\t\t// User has already subscribed, then disable the button\n\t\t\t\t\t\t\tsubscribeBtn.disabled = true;\n\t\t\t\t\t\t\tsubscribeBtn.textContent = 'Notifications enabled';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// User has not subscribed, then enable the button\n\t\t\t\t\t\t\tsubscribeBtn.disabled = false;\n\t\t\t\t\t\t\tsubscribeBtn.textContent = 'Enable notifications';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Notifications are not supported\n\t\t\t\tsubscribeBtn.disabled = true;\n\t\t\t\tsubscribeBtn.textContent = 'Notifications are not supported';\n\t\t\t}\n\t\t}\n\n\t\tvar installBtn = document.getElementById(\"INSTALL_APP\");\n\n\t\tif (installBtn) {\n\t\t\tif (deferredPrompt) {\n\t\t\t\tinstallBtn.style.display = 'inline-block';\n\t\t\t} else {\n\t\t\t\tinstallBtn.style.display = 'none';\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @module pwa.init\n **/\npwa.install = function() {\n\tvar installBtn = document.getElementById(\"INSTALL_APP\");\n\n\t// Show the prompt\n\tdeferredPrompt.prompt();\n\t// Wait for the user to respond to the prompt\n\tdeferredPrompt.userChoice\n\t\t.then(function(choiceResult) {\n\t\t\tif (choiceResult.outcome === 'accepted') {\n\t\t\t\tconsole.log('User accepted the A2HS prompt');\n\t\t\t} else {\n\t\t\t\tconsole.log('User dismissed the A2HS prompt');\n\t\t\t}\n\t\t\tdeferredPrompt = null;\n\t\t\t\n\t\t\t// Display the install button on the screen\n\t\t\tpwa.init.ui();\n\t\t});\n};\n\n/**\n * @module pwa.promise\n **/\npwa.promise = {\n\t/**\n\t * Invoke application process \"something\"\n\t * Returns a promise\n\t **/\n\tsomething: function(name) {\n\t\treturn apex.server.process(\n\t\t\t'something', {\n\t\t\t\tx01: name\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Function that handles a rejected promise and logs it\n\t **/\n\trejected: function(err) {\n\t\tconsole.error('Promise is rejected:', err);\n\t}\n};\n\n/**\n * @module pwa.call\n **/\npwa.call = {\n\t/**\n\t * Function that handles a rejected promise and logs it\n\t **/\n\tsomething: function(name) {\n\t\t// Check if the user is online\n\t\tif (navigator.onLine) {\n\t\t\t// User is online, then invoke the appropriate promise (something)\n\t\t\tpwa.promise.something(name)\n\t\t\t\t.then(function(data) {\n\t\t\t\t\t// Receives data from the server, and display the result in an alert\n\t\t\t\t\tapex.message.alert(JSON.stringify(data));\n\t\t\t\t}).catch(pwa.promise.rejected);\n\t\t} else {\n\t\t\t// User is offline, then add the promise into a stack of tasks\n\t\t\tpwa.task.add(arguments);\n\t\t\t// apexServiceWorker.sync.register('sync-something');\n\t\t}\n\n\t\tapex.item('P1_NAME').setValue('');\n\t}\n};\n\n/**\n * @module pwa.task\n **/\npwa.task = {\n\t/**\n\t * Function that appends a new task to the array of tasks\n\t **/\n\tadd: function(task) {\n\t\t// Append the new task to the existing array of pending tasks\n\t\tofflineTasks.push({\n\t\t\tname: task.callee.name,\n\t\t\targuments: Array.prototype.slice.call(task)\n\t\t});\n\n\t\tlocalforage.setItem('offline-tasks', offlineTasks).then(function(tasks) {\n\t\t\t// new task was saved using IndexedDB\n\t\t}).catch(pwa.promise.rejected);\n\n\t\t// Update the error message with the new task\n\t\tpwa.event.offline();\n\t},\n\n\t/**\n\t * Function that executes all tasks in the array of tasks\n\t * Then resets the array of tasks to an empty array\n\t **/\n\trun: function() {\n\t\t// Iterate through all tasks in the array of tasks\n\t\tfor (var key in offlineTasks) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(offlineTasks, key)) {\n\t\t\t\tconsole.log('Invoking', offlineTasks[key].name, '(', offlineTasks[key].arguments, ')');\n\t\t\t\tpwa.call[offlineTasks[key].name].apply(null, offlineTasks[key].arguments);\n\t\t\t}\n\t\t}\n\n\t\t// Resets the array of tasks to an empty array\n\t\tlocalforage.clear().then(function() {\n\t\t\tofflineTasks = [];\n\t\t\tconsole.log('Database \"offline-tasks\" is now empty.');\n\t\t}).catch(pwa.promise.rejected);\n\t}\n};\n\n/**\n * @module pwa.event\n **/\npwa.event = {\n\t/**\n\t * Things to do when user gets back online:\n\t * 1) Show a message to the user that he's back onLine\n\t * 2) Go to the stack of pending tasks\n\t **/\n\tonline: function(event) {\n\t\tif (navigator.onLine) {\n\t\t\tvar message = (offlineTasks.length > 0 ? '<br>Now running ' + offlineTasks.length + ' tasks.' : '');\n\t\t\tapex.message.showPageSuccess('You are back online!' + message);\n\t\t\tpwa.task.run();\n\t\t}\n\t},\n\n\t/**\n\t * Things to do when user loses connectivity:\n\t * 1) Hide other messages\n\t * 2) Show a message to the user that he's lost connection\n\t **/\n\toffline: function(event) {\n\t\tif (!navigator.onLine) {\n\t\t\t$('#t_Alert_Success').remove();\n\n\t\t\tvar errors = [{\n\t\t\t\ttype: 'error',\n\t\t\t\tlocation: 'page',\n\t\t\t\tmessage: 'You have lost connection <span aria-hidden=\"true\" class=\"fa fa-frown-o\"></span>'\n\t\t\t}];\n\n\t\t\t// Iterate through all tasks in the array of tasks\n\t\t\tfor (var key in offlineTasks) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(offlineTasks, key)) {\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlocation: 'page',\n\t\t\t\t\t\tmessage: '<span aria-hidden=\"true\" class=\"fa fa-spinner fa-anim-spin\"></span> Waiting to reconnect to execute: ' + offlineTasks[key].name\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tapex.message.clearErrors();\n\t\t\tapex.message.showErrors(errors);\n\t\t}\n\t}\n};\n\n/**\n * IIFE (Immediately-Invoked Function Expression)\n **/\n(function() {\n\twindow.addEventListener('online', pwa.event.online);\n\twindow.addEventListener('offline', pwa.event.offline);\n\n\twindow.addEventListener('beforeinstallprompt', function(event) {\n\t\t// Prevent Chrome 67 and earlier from automatically showing the prompt\n\t\tevent.preventDefault();\n\t\t// Stash the event so it can be triggered later.\n\t\tdeferredPrompt = event;\n\t\t// Display the install button on the screen\n\t\tpwa.init.ui();\n\t});\n\n\twindow.addEventListener('appinstalled', function(event) {\n\t\tconsole.log('App was installed', event);\n\t});\n})();\n\n/**\n * @module pwa.notification\n **/\npwa.notification = {\n\task: function() {\n\t\t// Check if the user has not subscribed yet, and if Notifications are supported\n\t\tif (!hasSubscribedNotifications && 'Notification' in window && 'PushManager' in window) {\n\t\t\t// Request permission to subscribe to notifications\n\t\t\tNotification.requestPermission(function(result) {\n\t\t\t\tif (result === 'granted') {\n\t\t\t\t\tconsole.log('Notification permission granted!');\n\n\t\t\t\t\t// Public key from Firebase, change it to yours\n\t\t\t\t\tvar vapidPublicKey = 'BOFoGrYiN1P70-UMcQ9vbfCJl9x5MXfxqCBbBqOVvim_s63i9xpM9P0PwqHvfNAs2D1rKYFOlMXhD3_Rtuybl2o';\n\t\t\t\t\t// Convert the public key\n\t\t\t\t\tvar convertedVapidPublicKey = urlBase64ToUint8Array(vapidPublicKey);\n\n\t\t\t\t\t// Subscribe to the notification\n\t\t\t\t\tapexServiceWorker.pushManager.subscribe({\n\t\t\t\t\t\t\tuserVisibleOnly: true,\n\t\t\t\t\t\t\tapplicationServerKey: convertedVapidPublicKey\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function(notification) {\n\t\t\t\t\t\t\t// POST the notification subscription to Firebase\n\t\t\t\t\t\t\t// notification.json below could be anything \n\t\t\t\t\t\t\treturn fetch('https://apex-pwa.firebaseio.com/notifications.json', {\n\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t\t'Accept': 'application/json'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbody: JSON.stringify(notification)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function(res) {\n\t\t\t\t\t\t\tif (res.ok) {\n\t\t\t\t\t\t\t\t// Show the first notification, basically to test it...\n\t\t\t\t\t\t\t\tapexServiceWorker.showNotification('Successfully subscribed!', {\n\t\t\t\t\t\t\t\t\tbody: 'You have successfully subscribed to our APEX notification service.',\n\t\t\t\t\t\t\t\t\ticon: appImages + 'images/icons/icon-96x96.png',\n\t\t\t\t\t\t\t\t\tbadge: appImages + 'images/icons/icon-96x96.png'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// Adapt UI (buttons mostly)\n\t\t\t\t\t\t\t\tpwa.init.ui();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(pwa.promise.rejected);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('Notification permission denied.');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n};\n\n/**\n * IIFE (Immediately-Invoked Function Expression)\n **/\n(function() {\n\tpwa.init.app();\n})();"]}